import asyncio
import logging
from aiogram import Bot, Dispatcher, F, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.client.default import DefaultBotProperties

API_TOKEN = '7343562026:AAHx983iRuX0dEVtMa5abowpAF3gI39UgbM'

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ü—Ä–∏–º–µ—Ä —Ä–µ—Ü–µ–ø—Ç–æ–≤
recipes = [
    {"name": "–û–≤—Å—è–Ω–∫–∞ —Å —Ñ—Ä—É–∫—Ç–∞–º–∏", "calories": 320, "b": 8, "j": 5, "u": 55, "type": "–∑–∞–≤—Ç—Ä–∞–∫"},
    {"name": "–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ —Å –æ–≤–æ—â–∞–º–∏", "calories": 400, "b": 35, "j": 10, "u": 20, "type": "–æ–±–µ–¥"},
    {"name": "–°–∞–ª–∞—Ç —Å —Ç—É–Ω—Ü–æ–º", "calories": 280, "b": 22, "j": 12, "u": 10, "type": "—É–∂–∏–Ω"},
    {"name": "–ü–∞—Å—Ç–∞ —Å —Ç–æ–º–∞—Ç–∞–º–∏", "calories": 450, "b": 12, "j": 15, "u": 60, "type": "–æ–±–µ–¥"},
    {"name": "–û–º–ª–µ—Ç —Å —Å—ã—Ä–æ–º –∏ –∑–µ–ª–µ–Ω—å—é", "calories": 350, "b": 20, "j": 25, "u": 5, "type": "–∑–∞–≤—Ç—Ä–∞–∫"},
    {"name": "–ô–æ–≥—É—Ä—Ç–æ–≤—ã–π –¥–µ—Å–µ—Ä—Ç —Å —è–≥–æ–¥–∞–º–∏", "calories": 250, "b": 10, "j": 8, "u": 35, "type": "–¥–µ—Å–µ—Ä—Ç"},
]

user_goals = {}

main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üçΩ –ü–æ–∏—Å–∫ –ø–æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º")],
        [KeyboardButton(text="üî• –ü–æ–∏—Å–∫ –ø–æ –∫–∞–ª–æ—Ä–∏—è–º")],
        [KeyboardButton(text="üìÖ –†–∞—Ü–∏–æ–Ω –Ω–∞ –¥–µ–Ω—å")],
        [KeyboardButton(text="üìä –ü–æ–∫–∞–∑–∞—Ç—å –ë–ñ–£")],
        [KeyboardButton(text="üéØ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º")],
        [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]
    ],
    resize_keyboard=True
)

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(bot=bot)

@dp.message(CommandStart())
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç \"–†–µ—Ü–µ–ø—Ç—ã –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\". –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å:", reply_markup=main_kb)

@dp.message(F.text == "üçΩ –ü–æ–∏—Å–∫ –ø–æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º")
async def preference_search(message: types.Message):
    types_set = sorted(set(r['type'] for r in recipes))
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=t)] for t in types_set] + [[KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)

@dp.message(F.text.in_({"–∑–∞–≤—Ç—Ä–∞–∫", "–æ–±–µ–¥", "—É–∂–∏–Ω", "–¥–µ—Å–µ—Ä—Ç"}))
async def preference_result(message: types.Message):
    selected_type = message.text.lower()
    filtered = [r for r in recipes if r['type'] == selected_type]
    if filtered:
        text = f"–í–æ—Ç —Ä–µ—Ü–µ–ø—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{selected_type}':\n" + "\n".join(f"{r['name']} ‚Äì {r['calories']} –∫–∫–∞–ª" for r in filtered)
    else:
        text = f"–ù–µ—Ç —Ä–µ—Ü–µ–ø—Ç–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{selected_type}'"
    await message.answer(text, reply_markup=main_kb)

@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_menu(message: types.Message):
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_kb)

@dp.message(F.text == "üî• –ü–æ–∏—Å–∫ –ø–æ –∫–∞–ª–æ—Ä–∏—è–º")
async def calories_search(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: 400):")

@dp.message(F.text.regexp(r"^\d+$"))
async def show_by_calories(message: types.Message):
    cal = int(message.text)
    filtered = [r for r in recipes if r["calories"] <= cal]
    if not filtered:
        await message.answer("–ù–µ—Ç –±–ª—é–¥ —Å —Ç–∞–∫–æ–π –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å—é")
    else:
        result = "–í–æ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã:\n" + "\n".join(f"{r['name']} ‚Äì {r['calories']} –∫–∫–∞–ª" for r in filtered)
        await message.answer(result)

@dp.message(F.text == "üìÖ –†–∞—Ü–∏–æ–Ω –Ω–∞ –¥–µ–Ω—å")
async def day_plan(message: types.Message):
    user_id = message.from_user.id
    goal = user_goals.get(user_id, 1800)
    total = 0
    plan = []
    for r in recipes:
        if total + r['calories'] <= goal:
            plan.append(r)
            total += r['calories']
    result = f"–†–∞—Ü–∏–æ–Ω –Ω–∞ –¥–µ–Ω—å (—Ü–µ–ª—å: {goal} –∫–∫–∞–ª):\n" + "\n".join(f"{r['name']} ‚Äì {r['calories']} –∫–∫–∞–ª" for r in plan) + f"\n–ò—Ç–æ–≥–æ: {total} –∫–∫–∞–ª"
    await message.answer(result)

@dp.message(F.text == "üìä –ü–æ–∫–∞–∑–∞—Ç—å –ë–ñ–£")
async def show_bju(message: types.Message):
    text = "–ë–ñ–£ –ø–æ —Ä–µ—Ü–µ–ø—Ç–∞–º:\n"
    for r in recipes:
        text += f"{r['name']}: –ë {r['b']}–≥ / –ñ {r['j']}–≥ / –£ {r['u']}–≥\n"
    await message.answer(text)

@dp.message(F.text == "üéØ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º")
async def set_goal_prompt(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–Ω–µ–≤–Ω—É—é —Ü–µ–ª—å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2000):")

@dp.message(F.text.regexp(r"^\d{4}$"))
async def set_goal_value(message: types.Message):
    cal = int(message.text)
    if 1000 <= cal <= 4000:
        user_goals[message.from_user.id] = cal
        await message.answer(f"–¶–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {cal} –∫–∫–∞–ª –≤ –¥–µ–Ω—å")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 1000 –¥–æ 4000")

@dp.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
async def cancel_action(message: types.Message):
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_kb)

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
